// Google Apps Script for IndiaMart Lead Manager Extension
// Copy this entire script to a new Google Apps Script project
// Then deploy it as a web app to get a URL that can be used by the extension

function doGet(e) {
  console.log('Received GET request - this endpoint only accepts POST requests');
  return ContentService.createTextOutput(JSON.stringify({
    status: 'error',
    message: 'This endpoint only accepts POST requests'
  })).setMimeType(ContentService.MimeType.JSON);
}

function doPost(e) {
  console.log('Received POST request');
  try {
    // Get the sheet ID from the request parameters or payload
    let sheetId;
    let parsedData;
    
    // Parse the request data
    const requestData = JSON.parse(e.postData.contents);
    sheetId = requestData.sheetId;
    parsedData = requestData.data;
    
    if (!sheetId) {
      console.log('Error: No sheet ID provided in request body');
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'No sheet ID provided in request body'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    if (!parsedData) {
      console.log('Error: No data provided in request body');
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'No data provided in request body'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    console.log('Opening spreadsheet with ID:', sheetId);
    // Open the spreadsheet
    let spreadsheet;
    try {
      spreadsheet = SpreadsheetApp.openById(sheetId);
      console.log('Successfully opened spreadsheet');
    } catch (error) {
      console.log('Error opening spreadsheet:', error.message);
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'Could not open spreadsheet: ' + error.message
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Get the first sheet
    let sheet = spreadsheet.getSheets()[0];
    console.log('Got first sheet');
    
    // Clear the sheet
    sheet.clear();
    console.log('Cleared existing data');
    
    // Check if we have data rows directly or need to extract them
    let rows = [];
    
    if (Array.isArray(parsedData.data)) {
      console.log('Processing direct array data');
      // Data is already in the expected format
      rows = parsedData.data;
    } else if (parsedData.data && Array.isArray(parsedData.data.data)) {
      console.log('Processing nested data structure');
      // Data is nested one level deeper
      const leads = parsedData.data.data;
      console.log('Found', leads.length, 'leads to process');
      
      // Define the specific fields to include
      const specificFields = [
        "contact_last_product",
        "contacts_name",
        "contacts_mobile1",
        "contact_city",
        "last_contact_date",
        "last_product_qty",
        "contacts_company"
      ];
      
      // Add the headers to the sheet with friendly names
      const friendlyHeaders = [
        "PRODUCT",
        "CUSTOMER",
        "CONTACT",
        "CITY",
        "LEAD DATE",
        "REQUIREMENTS",
        "FIRM"
      ];
      
      // Add headers as first row
      rows.push(friendlyHeaders);
      console.log('Added headers');
      
      // Prepare the data rows with only the specific fields
      for (let i = 0; i < leads.length; i++) {
        const lead = leads[i];
        const row = [];
        
        for (let j = 0; j < specificFields.length; j++) {
          const field = specificFields[j];
          // Check for the field using various possible naming conventions
          const value = lead[field] || 
                       lead[field.replace('contacts_', 'contact_')] || 
                       lead[field.replace('contact_', 'contacts_')] || 
                       lead[field.replace('_', '')] || 
                       lead[field.replace('_', '-')] || 
                       '';
          row.push(value);
        }
        
        rows.push(row);
      }
      console.log('Processed all leads');
    } else {
      console.log('Error: Invalid data format');
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'Invalid data format'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Set the data in the sheet
    if (rows.length > 0) {
      console.log('Setting data in sheet, total rows:', rows.length);
      // Set the headers in the sheet
      const headerRange = sheet.getRange(1, 1, 1, rows[0].length);
      headerRange.setValues([rows[0]]);
      
      // Format the headers with bold and larger font
      headerRange.setFontWeight('bold');
      headerRange.setFontSize(12); // Increase font size
      console.log('Formatted headers');
      
      // Set the data rows
      if (rows.length > 1) {
        sheet.getRange(2, 1, rows.length - 1, rows[0].length).setValues(rows.slice(1));
        console.log('Set data rows');
      }
      
      // Auto-resize columns
      for (let i = 1; i <= rows[0].length; i++) {
        sheet.autoResizeColumn(i);
      }
      console.log('Auto-resized columns');
    }
    
    console.log('Data import completed successfully');
    // Set CORS headers for cross-domain requests
    const output = ContentService.createTextOutput(JSON.stringify({
      status: 'success',
      message: 'Data imported successfully',
      rowCount: rows.length - 1 // Subtract 1 for the header row
    })).setMimeType(ContentService.MimeType.JSON);
    
    return output;
    
  } catch (error) {
    console.log('Unexpected error:', error.message);
    return ContentService.createTextOutput(JSON.stringify({
      status: 'error',
      message: 'An unexpected error occurred: ' + error.message
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// Instructions for setting up this script:
// 1. Go to https://script.google.com/ and create a new project
// 2. Copy and paste this entire script into the editor
// 3. Click on Deploy > New deployment
// 4. Select "Web app" as the deployment type
// 5. Set "Who has access" to "Anyone"
// 6. Click "Deploy"
// 7. Copy the Web app URL that is generated
// 8. Use this URL in your extension's configuration 

// IMPORTANT: After deploying, you need to:
// 1. Replace "YOUR_SCRIPT_ID" in the popup.js file with the script ID from your deployment URL
// 2. The URL will look like: https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec 