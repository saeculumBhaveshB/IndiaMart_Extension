// Google Apps Script for IndiaMart Lead Manager Extension
// Copy this entire script to a new Google Apps Script project
// Then deploy it as a web app to get a URL that can be used by the extension

function doGet(e) {
  console.log('Received GET request - this endpoint only accepts POST requests');
  return ContentService.createTextOutput(JSON.stringify({
    status: 'error',
    message: 'This endpoint only accepts POST requests'
  })).setMimeType(ContentService.MimeType.JSON);
}

function doPost(e) {
  console.log('Received POST request');
  try {
    // Get the sheet ID and data from the request
    const requestData = JSON.parse(e.postData.contents);
    const sheetId = requestData.sheetId;
    const rows = requestData.data; // Data is now directly an array of rows
    
    if (!sheetId) {
      console.log('Error: No sheet ID provided');
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'No sheet ID provided'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    if (!Array.isArray(rows)) {
      console.log('Error: Data must be an array');
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'Invalid data format: expected an array'
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    console.log('Opening spreadsheet with ID:', sheetId);
    // Open the spreadsheet
    let spreadsheet;
    try {
      spreadsheet = SpreadsheetApp.openById(sheetId);
      console.log('Successfully opened spreadsheet');
    } catch (error) {
      console.log('Error opening spreadsheet:', error.message);
      return ContentService.createTextOutput(JSON.stringify({
        status: 'error',
        message: 'Could not open spreadsheet: ' + error.message
      })).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Get the first sheet
    let sheet = spreadsheet.getSheets()[0];
    console.log('Got first sheet');
    
    // Clear the sheet
    sheet.clear();
    console.log('Cleared existing data');
    
    if (rows.length > 0) {
      console.log('Setting data in sheet, total rows:', rows.length);
      
      // Set all the data at once
      sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows);
      console.log('Set all data');
      
      // Format the headers (first row)
      const headerRange = sheet.getRange(1, 1, 1, rows[0].length);
      headerRange.setFontWeight('bold');
      headerRange.setFontSize(12);
      console.log('Formatted headers');
      
      // Auto-resize columns
      for (let i = 1; i <= rows[0].length; i++) {
        sheet.autoResizeColumn(i);
      }
      console.log('Auto-resized columns');
    }
    
    console.log('Data import completed successfully');
    return ContentService.createTextOutput(JSON.stringify({
      status: 'success',
      message: 'Data imported successfully',
      rowCount: rows.length - 1 // Subtract 1 for the header row
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    console.log('Unexpected error:', error.message);
    return ContentService.createTextOutput(JSON.stringify({
      status: 'error',
      message: 'An unexpected error occurred: ' + error.message
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// Instructions for setting up this script:
// 1. Go to https://script.google.com/ and create a new project
// 2. Copy and paste this entire script into the editor
// 3. Click on Deploy > New deployment
// 4. Select "Web app" as the deployment type
// 5. Set "Who has access" to "Anyone"
// 6. Click "Deploy"
// 7. Copy the Web app URL that is generated
// 8. Use this URL in your extension's configuration 

// IMPORTANT: After deploying, you need to:
// 1. Replace "YOUR_SCRIPT_ID" in the popup.js file with the script ID from your deployment URL
// 2. The URL will look like: https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec 